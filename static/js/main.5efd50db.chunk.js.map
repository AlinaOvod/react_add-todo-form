{"version":3,"sources":["api/users.ts","components/PostForm/PostForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","servises/getUserById.ts","servises/getNewPostId.ts","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","PostForm","onAdd","useState","userId","setUserId","hasUserError","setHasUserError","title","setTitle","hasTitleError","setHasTitleError","hasPatternError","setHasPatternError","action","method","onSubmit","event","preventDefault","trim","sanitizedT","replace","completed","className","htmlFor","type","placeholder","value","onChange","target","disabled","usersFromServer","map","user","UserInfo","href","TodoInfo","post","find","el","classNames","TodoList","posts","getUserById","getNewPostId","Math","max","initialposts","todo","App","setPosts","newPost","prevPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5efd50db.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport { Todo } from '../../Types/Todo';\nimport usersFromServer from '../../api/users';\n\ntype Props = {\n  onAdd: (post: Todo) => void;\n};\n\nexport const PostForm: React.FC<Props> = ({ onAdd }) => {\n  const [userId, setUserId] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasPatternError, setHasPatternError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setHasTitleError(false);\n    setHasPatternError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event?.preventDefault();\n\n    if (!title.trim()) {\n      setTitle('');\n      setHasTitleError(true);\n      setHasUserError(!userId);\n\n      return;\n    }\n\n    const sanitizedT = title.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, '');\n\n    if (!sanitizedT) {\n      setHasPatternError(true);\n      setTitle('');\n\n      return;\n    }\n\n    setHasUserError(!userId);\n\n    if (!userId) {\n      return;\n    }\n\n    onAdd({\n      id: 0,\n      title: sanitizedT,\n      completed: false,\n      userId,\n    });\n\n    setUserId(0);\n    setTitle('');\n    setHasTitleError(false);\n    setHasUserError(false);\n  };\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n      <label className=\"label\" htmlFor=\"post-title\">Title</label>\n      <div className=\"field\">\n        <input\n          id=\"post-title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Add some text\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n        {!hasTitleError && hasPatternError && (\n          <span className=\"error\">Please enter only letters and digits</span>\n        )}\n\n      </div>\n\n      <label className=\"label\" htmlFor=\"post-user\">User</label>\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          id=\"post-user\"\n          value={userId}\n          onChange={handleUserChange}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n\n          {usersFromServer.map(user => (\n            <option\n              value={user.id}\n              key={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserError && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { User } from '../../Types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../Types/Post';\nimport { UserInfo } from '../UserInfo';\nimport usersFromServer from '../../api/users';\nimport { User } from '../../Types/User';\n\ntype Props = {\n  post: Post\n};\n\nexport const TodoInfo: React.FC<Props> = ({ post }) => {\n  const [users] = useState([...usersFromServer]);\n\n  const user = users.find((el: User) => el.id === post.userId);\n\n  return (\n    <article\n      data-id={post.id}\n      className={classNames('TodoInfo',\n        { 'TodoInfo--completed': post.completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {post.title}\n      </h2>\n      {user && <UserInfo user={user} />}\n\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Post } from '../../Types/Post';\n\ntype Props = {\n  posts: Post[];\n};\n\nexport const TodoList: React.FC<Props> = ({ posts }) => {\n  return (\n    <section className=\"TodoList\">\n      {posts.map(post => (\n        <TodoInfo post={post} key={post.id} />\n      ))}\n    </section>\n  );\n};\n","import usersFromServer from '../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n  || null;\n}\n","import { Post } from '../Types/Post';\n\nexport function getNewPostId(posts: Post[]) {\n  const maxId = Math.max(\n    ...posts.map(post => post.id),\n  );\n\n  return maxId + 1;\n}\n","import './App.scss';\n\nimport { useState } from 'react';\nimport todosFromServer from './api/todos';\nimport { PostForm } from './components/PostForm';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './Types/Todo';\nimport { Post } from './Types/Post';\nimport { getUserById } from './servises/getUserById';\nimport { getNewPostId } from './servises/getNewPostId';\n\nconst initialposts = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [posts, setPosts] = useState<Post[]>(initialposts);\n\n  const onAdd = (post: Todo): void => {\n    const newPost = {\n      ...post,\n      user: getUserById(post.userId),\n      id: getNewPostId(posts),\n    };\n\n    setPosts(prevPosts => [...prevPosts, newPost]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <PostForm onAdd={onAdd} />\n\n      <TodoList posts={posts} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}